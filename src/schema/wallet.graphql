enum WalletTransactionOrderBy {
  date
  client
  character
  credit
  invGroup
  item
  quantity
  station
  unitPrice
}

enum WalletJournalOrderBy {
  date
  amount
  character
  balance
  description
}

enum MarketOrderOrderBy {
  issued
}

enum OrderType {
  buy
  sell
}

input WalletTransactionOrderByInput {
  column: WalletTransactionOrderBy!
  order: Order!
}

input WalletJournalOrderByInput {
  column: WalletJournalOrderBy!
  order: Order!
}

input MarketOrderOrderByInput {
  column: MarketOrderOrderBy!
  order: Order!
}

type InventoryItem {
  id: ID!
  name: String
  description: String
}

type Location {
  id: ID!
  name: String!
}

type Client {
  id: ID!
  name: String!
  category: String!
}

enum OrderState {
  active
  cancelled
  expired
}

type MarketOrder {
  id: ID!
  """
  Character who issued the order
  """
  character: Character!
  """
  Number of days for which order is valid (starting from the issued date). An order expires at time issued + duration
  """
  duration: Int!
  """
  For buy orders, the amount of ISK in escrow
  """
  escrow: Float
  """
  Item transacted in this order
  """
  item: InventoryItem!
  """
  True if this is buy order
  """
  isBuy: Boolean!
  """
  Signifies whether the buy/sell order was placed on behalf of a corporation
  """
  isCorporation: Boolean!
  """
  Location where order was placed
  """
  location: Location!
  """
  For buy orders, the minimum quantity that will be accepted in a matching sell order
  """
  minVolume: Int
  """
  Date and time when this order was issued
  """
  issued: DateTime!
  """
  Cost per unit for this order
  """
  price: Float!
  """
  Valid order range, numbers are ranges in jumps
  """
  range: String!
  """
  Quantity of items still required or offered
  """
  volumeRemain: Int!
  """
  Quantity of items required or offered at time order was placed
  """
  volumeTotal: Int!
  """
  Current order state
  """
  state: OrderState!
}

type MarketGroup {
  id: ID!
  name: String!
}

type InvGroup {
  id: ID!
  name: String!
}

type WalletTransaction {
  id: ID!
  credit: Float!
  client: Client!
  character: Character!
  date: DateTime!
  isBuy: Boolean!
  item: InventoryItem!
  location: Location!
  invGroup: InvGroup!
  marketGroup: MarketGroup
  quantity: Int!
  unitPrice: Float!
}

type JournalEntry {
  id: ID!
  amount: Float!
  balance: Float!
  character: Character!
  date: DateTime!
  description: String
}

type WalletTransactions {
  total: Int!
  lastUpdate: DateTime
  transactions: [WalletTransaction!]!
}

type JournalEntries {
  total: Int!
  entries: [JournalEntry!]!
}

type MarketOrders {
  total: Int!
  orders: [MarketOrder!]!
}

input WalletTransactionFilter {
  ids: [ID!]
  item: String
  characterId: ID
  orderType: OrderType
}

input WalletJournalFilter {
  characterId: ID
}

input OrderStateFilter {
  active: Boolean
  expired: Boolean
  cancelled: Boolean
}

input MarketOrderFilter {
  characterId: ID
  state: OrderStateFilter
}

type WalletTransactionSummaryItem {
  id: ID!
  name: String!
  quantity: Int!
  credit: Float!
}

type WalletTransactionSummary {
  items: [WalletTransactionSummaryItem!]!
}

extend type Query {
  marketOrders(page: PageInput, filter: MarketOrderFilter, orderBy: MarketOrderOrderByInput): MarketOrders!
  walletJournal(page: PageInput, filter: WalletJournalFilter, orderBy: WalletJournalOrderByInput): JournalEntries!
  walletTransactions(page: PageInput, filter: WalletTransactionFilter, orderBy: WalletTransactionOrderByInput): WalletTransactions!
  walletTransactionSummary(ids: [ID!]!): WalletTransactionSummary!
  walletTransactionIds(filter: WalletTransactionFilter): [ID!]!
}
