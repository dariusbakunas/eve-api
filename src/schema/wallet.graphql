enum WalletTransactionOrderBy {
  date
  client
  character
  credit
  item
  quantity
  station
  unitPrice
}

enum WalletJournalOrderBy {
  date
  amount
  character
  balance
  description
}

enum OrderType {
  buy
  sell
}

input WalletTransactionOrderByInput {
  column: WalletTransactionOrderBy!
  order: Order!
}

input WalletJournalOrderByInput {
  column: WalletJournalOrderBy!
  order: Order!
}

type InventoryItem {
  id: ID!
  name: String
  description: String
}

type Location {
  id: ID!
  name: String!
}

type Client {
  id: ID!
  name: String!
  category: String!
}

type WalletTransaction {
  id: ID!
  credit: Float!
  client: Client!
  character: Character
  date: DateTime!
  isBuy: Boolean!
  item: InventoryItem
  location: Location!
  quantity: Int!
  unitPrice: Float!
}

type JournalEntry {
  id: ID!
  amount: Float!
  balance: Float!
  character: Character
  date: DateTime!
  description: String
}

type WalletTransactions {
  total: Int!
  transactions: [WalletTransaction!]!
}

type JournalEntries {
  total: Int!
  entries: [JournalEntry!]!
}

input WalletTransactionFilter {
  item: String
  characterId: ID
  orderType: OrderType
}

extend type Query {
  walletJournal(page: PageInput, orderBy: WalletJournalOrderByInput): JournalEntries
  walletTransactions(page: PageInput, filter: WalletTransactionFilter, orderBy: WalletTransactionOrderByInput): WalletTransactions
}
