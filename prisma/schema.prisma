generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agtAgentTypes {
  agentTypeID Int     @id
  agentType   String? @db.VarChar(50)
}

model agtAgents {
  agentID       Int      @id
  divisionID    Int?
  corporationID Int?
  locationID    Int?
  level         Int?
  quality       Int?
  agentTypeID   Int?
  isLocator     Boolean?

  @@index([corporationID], map: "ix_evesde_agtAgents_corporationID")
  @@index([locationID], map: "ix_evesde_agtAgents_locationID")
}

model agtAgentsInSpace {
  agentID       Int  @id
  dungeonID     Int?
  solarSystemID Int?
  spawnPointID  Int?
  typeID        Int?

  @@index([solarSystemID], map: "ix_evesde_agtAgentsInSpace_solarSystemID")
}

model agtResearchAgents {
  agentID Int
  typeID  Int

  @@id([agentID, typeID])
  @@index([typeID], map: "ix_evesde_agtResearchAgents_typeID")
}

model certCerts {
  certID      Int     @id
  description String?
  groupID     Int?
  name        String? @db.VarChar(255)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model certMasteries {
  typeID       Int?
  masteryLevel Int?
  certID       Int?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model certSkills {
  certID        Int?
  skillID       Int?
  certLevelInt  Int?
  skillLevel    Int?
  certLevelText String? @db.VarChar(8)

  @@index([skillID], map: "ix_evesde_certSkills_skillID")
  @@ignore
}

model chrAncestries {
  ancestryID       Int     @id
  ancestryName     String? @db.VarChar(100)
  bloodlineID      Int?
  description      String? @db.VarChar(1000)
  perception       Int?
  willpower        Int?
  charisma         Int?
  memory           Int?
  intelligence     Int?
  iconID           Int?
  shortDescription String? @db.VarChar(500)
}

model chrAttributes {
  attributeID      Int     @id
  attributeName    String? @db.VarChar(100)
  description      String? @db.VarChar(1000)
  iconID           Int?
  shortDescription String? @db.VarChar(500)
  notes            String? @db.VarChar(500)
}

model chrBloodlines {
  bloodlineID            Int     @id
  bloodlineName          String? @db.VarChar(100)
  raceID                 Int?
  description            String? @db.VarChar(1000)
  maleDescription        String? @db.VarChar(1000)
  femaleDescription      String? @db.VarChar(1000)
  shipTypeID             Int?
  corporationID          Int?
  perception             Int?
  willpower              Int?
  charisma               Int?
  memory                 Int?
  intelligence           Int?
  iconID                 Int?
  shortDescription       String? @db.VarChar(500)
  shortMaleDescription   String? @db.VarChar(500)
  shortFemaleDescription String? @db.VarChar(500)
}

model chrFactions {
  factionID            Int     @id
  factionName          String? @db.VarChar(100)
  description          String? @db.VarChar(1000)
  raceIDs              Int?
  solarSystemID        Int?
  corporationID        Int?
  sizeFactor           Float?
  stationCount         Int?
  stationSystemCount   Int?
  militiaCorporationID Int?
  iconID               Int?
}

model chrRaces {
  raceID           Int     @id
  raceName         String? @db.VarChar(100)
  description      String? @db.VarChar(1000)
  iconID           Int?
  shortDescription String? @db.VarChar(500)
}

model crpActivities {
  activityID   Int     @id
  activityName String? @db.VarChar(100)
  description  String? @db.VarChar(1000)
}

model crpNPCCorporationDivisions {
  corporationID Int
  divisionID    Int
  size          Int?

  @@id([corporationID, divisionID])
}

model crpNPCCorporationResearchFields {
  skillID       Int
  corporationID Int

  @@id([skillID, corporationID])
}

model crpNPCCorporationTrades {
  corporationID Int
  typeID        Int

  @@id([corporationID, typeID])
}

model crpNPCCorporations {
  corporationID      Int      @id
  size               String?  @db.Char(1)
  extent             String?  @db.Char(1)
  solarSystemID      Int?
  investorID1        Int?
  investorShares1    Int?
  investorID2        Int?
  investorShares2    Int?
  investorID3        Int?
  investorShares3    Int?
  investorID4        Int?
  investorShares4    Int?
  friendID           Int?
  enemyID            Int?
  publicShares       Int?
  initialPrice       Int?
  minSecurity        Float?
  scattered          Boolean?
  fringe             Int?
  corridor           Int?
  hub                Int?
  border             Int?
  factionID          Int?
  sizeFactor         Float?
  stationCount       Int?
  stationSystemCount Int?
  description        String?  @db.VarChar(4000)
  iconID             Int?
}

model crpNPCDivisions {
  divisionID   Int     @id
  divisionName String? @db.VarChar(100)
  description  String? @db.VarChar(1000)
  leaderType   String? @db.VarChar(100)
}

model dgmAttributeCategories {
  categoryID          Int     @id
  categoryName        String? @db.VarChar(50)
  categoryDescription String? @db.VarChar(200)
}

model dgmAttributeTypes {
  attributeID   Int      @id
  attributeName String?  @db.VarChar(100)
  description   String?  @db.VarChar(1000)
  iconID        Int?
  defaultValue  Float?
  published     Boolean?
  displayName   String?  @db.VarChar(150)
  unitID        Int?
  stackable     Boolean?
  highIsGood    Boolean?
  categoryID    Int?
}

model dgmEffects {
  effectID                       Int      @id
  effectName                     String?  @db.VarChar(400)
  effectCategory                 Int?
  preExpression                  Int?
  postExpression                 Int?
  description                    String?  @db.VarChar(1000)
  guid                           String?  @db.VarChar(60)
  iconID                         Int?
  isOffensive                    Boolean?
  isAssistance                   Boolean?
  durationAttributeID            Int?
  trackingSpeedAttributeID       Int?
  dischargeAttributeID           Int?
  rangeAttributeID               Int?
  falloffAttributeID             Int?
  disallowAutoRepeat             Boolean?
  published                      Boolean?
  displayName                    String?  @db.VarChar(100)
  isWarpSafe                     Boolean?
  rangeChance                    Boolean?
  electronicChance               Boolean?
  propulsionChance               Boolean?
  distribution                   Int?
  sfxName                        String?  @db.VarChar(20)
  npcUsageChanceAttributeID      Int?
  npcActivationChanceAttributeID Int?
  fittingUsageChanceAttributeID  Int?
  modifierInfo                   String?
}

model dgmExpressions {
  expressionID          Int     @id
  operandID             Int?
  arg1                  Int?
  arg2                  Int?
  expressionValue       String? @db.VarChar(100)
  description           String? @db.VarChar(1000)
  expressionName        String? @db.VarChar(500)
  expressionTypeID      Int?
  expressionGroupID     Int?
  expressionAttributeID Int?
}

model dgmTypeAttributes {
  typeID      Int
  attributeID Int
  valueInt    Int?
  valueFloat  Float?

  @@id([typeID, attributeID])
  @@index([attributeID], map: "ix_evesde_dgmTypeAttributes_attributeID")
}

model dgmTypeEffects {
  typeID    Int
  effectID  Int
  isDefault Boolean?

  @@id([typeID, effectID])
}

model eveGraphics {
  graphicID      Int     @id
  sofFactionName String? @db.VarChar(100)
  graphicFile    String? @db.VarChar(256)
  sofHullName    String? @db.VarChar(100)
  sofRaceName    String? @db.VarChar(100)
  description    String?
}

model eveIcons {
  iconID      Int     @id
  iconFile    String? @db.VarChar(500)
  description String?
}

model eveUnits {
  unitID      Int     @id
  unitName    String? @db.VarChar(100)
  displayName String? @db.VarChar(50)
  description String? @db.VarChar(1000)
}

model industryActivity {
  typeID     Int
  activityID Int
  time       Int?

  @@id([typeID, activityID])
  @@index([activityID], map: "ix_evesde_industryActivity_activityID")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model industryActivityMaterials {
  typeID         Int?
  activityID     Int?
  materialTypeID Int?
  quantity       Int?

  @@index([typeID, activityID], map: "industryActivityMaterials_idx1")
  @@index([typeID], map: "ix_evesde_industryActivityMaterials_typeID")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model industryActivityProbabilities {
  typeID        Int?
  activityID    Int?
  productTypeID Int?
  probability   Decimal? @db.Decimal(3, 2)

  @@index([productTypeID], map: "ix_evesde_industryActivityProbabilities_productTypeID")
  @@index([typeID], map: "ix_evesde_industryActivityProbabilities_typeID")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model industryActivityProducts {
  typeID        Int?
  activityID    Int?
  productTypeID Int?
  quantity      Int?

  @@index([productTypeID], map: "ix_evesde_industryActivityProducts_productTypeID")
  @@index([typeID], map: "ix_evesde_industryActivityProducts_typeID")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model industryActivityRaces {
  typeID        Int?
  activityID    Int?
  productTypeID Int?
  raceID        Int?

  @@index([productTypeID], map: "ix_evesde_industryActivityRaces_productTypeID")
  @@index([typeID], map: "ix_evesde_industryActivityRaces_typeID")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model industryActivitySkills {
  typeID     Int?
  activityID Int?
  skillID    Int?
  level      Int?

  @@index([typeID, activityID], map: "industryActivitySkills_idx1")
  @@index([skillID], map: "ix_evesde_industryActivitySkills_skillID")
  @@index([typeID], map: "ix_evesde_industryActivitySkills_typeID")
  @@ignore
}

model industryBlueprints {
  typeID             Int  @id
  maxProductionLimit Int?
}

model invCategories {
  categoryID   Int      @id
  categoryName String?  @db.VarChar(100)
  iconID       Int?
  published    Boolean?
}

model invContrabandTypes {
  factionID        Int
  typeID           Int
  standingLoss     Float?
  confiscateMinSec Float?
  fineByValue      Float?
  attackMinSec     Float?

  @@id([factionID, typeID])
  @@index([typeID], map: "ix_evesde_invContrabandTypes_typeID")
}

model invControlTowerResourcePurposes {
  purpose     Int     @id
  purposeText String? @db.VarChar(100)
}

model invControlTowerResources {
  controlTowerTypeID Int
  resourceTypeID     Int
  purpose            Int?
  quantity           Int?
  minSecurityLevel   Float?
  factionID          Int?

  @@id([controlTowerTypeID, resourceTypeID])
}

model invFlags {
  flagID   Int     @id
  flagName String? @db.VarChar(200)
  flagText String? @db.VarChar(100)
  orderID  Int?
}

model invGroups {
  groupID              Int      @id
  categoryID           Int?
  groupName            String?  @db.VarChar(100)
  iconID               Int?
  useBasePrice         Boolean?
  anchored             Boolean?
  anchorable           Boolean?
  fittableNonSingleton Boolean?
  published            Boolean?

  @@index([categoryID], map: "ix_evesde_invGroups_categoryID")
}

model invItems {
  itemID     Int @id
  typeID     Int
  ownerID    Int
  locationID Int
  flagID     Int
  quantity   Int

  @@index([ownerID, locationID], map: "items_IX_OwnerLocation")
  @@index([locationID], map: "ix_evesde_invItems_locationID")
}

model invMarketGroups {
  marketGroupID   Int      @id
  parentGroupID   Int?
  marketGroupName String?  @db.VarChar(100)
  description     String?  @db.VarChar(3000)
  iconID          Int?
  hasTypes        Boolean?
}

model invMetaGroups {
  metaGroupID   Int     @id
  metaGroupName String? @db.VarChar(100)
  description   String? @db.VarChar(1000)
  iconID        Int?
}

model invMetaTypes {
  typeID       Int  @id
  parentTypeID Int?
  metaGroupID  Int?
}

model invNames {
  itemID   Int    @id
  itemName String @db.VarChar(200)
}

model invPositions {
  itemID Int    @id
  x      Float
  y      Float
  z      Float
  yaw    Float? @db.Real
  pitch  Float? @db.Real
  roll   Float? @db.Real
}

model invTraits {
  traitID   Int     @id @default(autoincrement())
  typeID    Int?
  skillID   Int?
  bonus     Float?
  bonusText String?
  unitID    Int?
}

model invTypeMaterials {
  typeID         Int
  materialTypeID Int
  quantity       Int

  @@id([typeID, materialTypeID])
}

model invTypeReactions {
  reactionTypeID Int
  input          Boolean
  typeID         Int
  quantity       Int?

  @@id([reactionTypeID, input, typeID])
}

model invTypes {
  typeID        Int      @id
  groupID       Int?
  typeName      String?  @db.VarChar(100)
  description   String?
  mass          Float?
  volume        Float?
  capacity      Float?
  portionSize   Int?
  raceID        Int?
  basePrice     Decimal? @db.Decimal(19, 4)
  published     Boolean?
  marketGroupID Int?
  iconID        Int?
  soundID       Int?
  graphicID     Int?

  @@index([groupID], map: "ix_evesde_invTypes_groupID")
}

model invUniqueNames {
  itemID   Int    @id
  itemName String @unique(map: "ix_evesde_invUniqueNames_itemName") @db.VarChar(200)
  groupID  Int?

  @@index([groupID, itemName], map: "invUniqueNames_IX_GroupName")
}

model invVolumes {
  typeID Int  @id
  volume Int?
}

model mapCelestialGraphics {
  celestialID  Int      @id
  heightMap1   Int?
  heightMap2   Int?
  shaderPreset Int?
  population   Boolean?
}

model mapCelestialStatistics {
  celestialID    Int      @id
  temperature    Float?
  spectralClass  String?  @db.VarChar(10)
  luminosity     Float?
  age            Float?
  life           Float?
  orbitRadius    Float?
  eccentricity   Float?
  massDust       Float?
  massGas        Float?
  fragmented     Boolean?
  density        Float?
  surfaceGravity Float?
  escapeVelocity Float?
  orbitPeriod    Float?
  rotationRate   Float?
  locked         Boolean?
  pressure       Float?
  radius         Float?
  mass           Int?
}

model mapConstellationJumps {
  fromRegionID        Int?
  fromConstellationID Int
  toConstellationID   Int
  toRegionID          Int?

  @@id([fromConstellationID, toConstellationID])
}

model mapConstellations {
  regionID          Int?
  constellationID   Int     @id
  constellationName String? @db.VarChar(100)
  x                 Float?
  y                 Float?
  z                 Float?
  xMin              Float?
  xMax              Float?
  yMin              Float?
  yMax              Float?
  zMin              Float?
  zMax              Float?
  factionID         Int?
  radius            Float?
}

model mapDenormalize {
  itemID          Int     @id
  typeID          Int?
  groupID         Int?
  solarSystemID   Int?
  constellationID Int?
  regionID        Int?
  orbitID         Int?
  x               Float?
  y               Float?
  z               Float?
  radius          Float?
  itemName        String? @db.VarChar(100)
  security        Float?
  celestialIndex  Int?
  orbitIndex      Int?

  @@index([constellationID], map: "ix_evesde_mapDenormalize_constellationID")
  @@index([orbitID], map: "ix_evesde_mapDenormalize_orbitID")
  @@index([regionID], map: "ix_evesde_mapDenormalize_regionID")
  @@index([solarSystemID], map: "ix_evesde_mapDenormalize_solarSystemID")
  @@index([typeID], map: "ix_evesde_mapDenormalize_typeID")
  @@index([groupID, constellationID], map: "mapDenormalize_IX_groupConstellation")
  @@index([groupID, regionID], map: "mapDenormalize_IX_groupRegion")
  @@index([groupID, solarSystemID], map: "mapDenormalize_IX_groupSystem")
}

model mapJumps {
  stargateID    Int  @id
  destinationID Int?
}

model mapLandmarks {
  landmarkID   Int     @id
  landmarkName String? @db.VarChar(100)
  description  String?
  locationID   Int?
  x            Float?
  y            Float?
  z            Float?
  iconID       Int?
}

model mapLocationScenes {
  locationID Int  @id
  graphicID  Int?
}

model mapLocationWormholeClasses {
  locationID      Int  @id
  wormholeClassID Int?
}

model mapRegionJumps {
  fromRegionID Int
  toRegionID   Int

  @@id([fromRegionID, toRegionID])
}

model mapRegions {
  regionID   Int     @id
  regionName String? @db.VarChar(100)
  x          Float?
  y          Float?
  z          Float?
  xMin       Float?
  xMax       Float?
  yMin       Float?
  yMax       Float?
  zMin       Float?
  zMax       Float?
  factionID  Int?
  nebula     Int?
  radius     Float?
}

model mapSolarSystemJumps {
  fromRegionID        Int?
  fromConstellationID Int?
  fromSolarSystemID   Int
  toSolarSystemID     Int
  toConstellationID   Int?
  toRegionID          Int?

  @@id([fromSolarSystemID, toSolarSystemID])
}

model mapSolarSystems {
  regionID        Int?
  constellationID Int?
  solarSystemID   Int      @id
  solarSystemName String?  @db.VarChar(100)
  x               Float?
  y               Float?
  z               Float?
  xMin            Float?
  xMax            Float?
  yMin            Float?
  yMax            Float?
  zMin            Float?
  zMax            Float?
  luminosity      Float?
  border          Boolean?
  fringe          Boolean?
  corridor        Boolean?
  hub             Boolean?
  international   Boolean?
  regional        Boolean?
  constellation   Boolean?
  security        Float?
  factionID       Int?
  radius          Float?
  sunTypeID       Int?
  securityClass   String?  @db.VarChar(2)

  @@index([constellationID], map: "ix_evesde_mapSolarSystems_constellationID")
  @@index([regionID], map: "ix_evesde_mapSolarSystems_regionID")
  @@index([security], map: "ix_evesde_mapSolarSystems_security")
}

model mapUniverse {
  universeID   Int     @id
  universeName String? @db.VarChar(100)
  x            Float?
  y            Float?
  z            Float?
  xMin         Float?
  xMax         Float?
  yMin         Float?
  yMax         Float?
  zMin         Float?
  zMax         Float?
  radius       Float?
}

model planetSchematics {
  schematicID   Int     @id
  schematicName String? @db.VarChar(255)
  cycleTime     Int?
}

model planetSchematicsPinMap {
  schematicID Int
  pinTypeID   Int

  @@id([schematicID, pinTypeID])
}

model planetSchematicsTypeMap {
  schematicID Int
  typeID      Int
  quantity    Int?
  isInput     Boolean?

  @@id([schematicID, typeID])
}

model ramActivities {
  activityID   Int      @id
  activityName String?  @db.VarChar(100)
  iconNo       String?  @db.VarChar(5)
  description  String?  @db.VarChar(1000)
  published    Boolean?
}

model ramAssemblyLineStations {
  stationID          Int
  assemblyLineTypeID Int
  quantity           Int?
  stationTypeID      Int?
  ownerID            Int?
  solarSystemID      Int?
  regionID           Int?

  @@id([stationID, assemblyLineTypeID])
  @@index([ownerID], map: "ix_evesde_ramAssemblyLineStations_ownerID")
  @@index([regionID], map: "ix_evesde_ramAssemblyLineStations_regionID")
  @@index([solarSystemID], map: "ix_evesde_ramAssemblyLineStations_solarSystemID")
}

model ramAssemblyLineTypeDetailPerCategory {
  assemblyLineTypeID Int
  categoryID         Int
  timeMultiplier     Float?
  materialMultiplier Float?
  costMultiplier     Float?

  @@id([assemblyLineTypeID, categoryID])
}

model ramAssemblyLineTypeDetailPerGroup {
  assemblyLineTypeID Int
  groupID            Int
  timeMultiplier     Float?
  materialMultiplier Float?
  costMultiplier     Float?

  @@id([assemblyLineTypeID, groupID])
}

model ramAssemblyLineTypes {
  assemblyLineTypeID     Int     @id
  assemblyLineTypeName   String? @db.VarChar(100)
  description            String? @db.VarChar(1000)
  baseTimeMultiplier     Float?
  baseMaterialMultiplier Float?
  baseCostMultiplier     Float?
  volume                 Float?
  activityID             Int?
  minCostPerHour         Float?
}

model ramInstallationTypeContents {
  installationTypeID Int
  assemblyLineTypeID Int
  quantity           Int?

  @@id([installationTypeID, assemblyLineTypeID])
}

model skinLicense {
  licenseTypeID Int  @id
  duration      Int?
  skinID        Int?
}

model skinMaterials {
  skinMaterialID Int  @id
  displayNameID  Int?
  materialSetID  Int?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model skinShip {
  skinID Int?
  typeID Int?

  @@index([skinID], map: "ix_evesde_skinShip_skinID")
  @@index([typeID], map: "ix_evesde_skinShip_typeID")
  @@ignore
}

model skins {
  skinID         Int     @id
  internalName   String? @db.VarChar(70)
  skinMaterialID Int?
}

model staOperationServices {
  operationID Int
  serviceID   Int

  @@id([operationID, serviceID])
}

model staOperations {
  activityID            Int?
  operationID           Int     @id
  operationName         String? @db.VarChar(100)
  description           String? @db.VarChar(1000)
  fringe                Int?
  corridor              Int?
  hub                   Int?
  border                Int?
  ratio                 Int?
  caldariStationTypeID  Int?
  minmatarStationTypeID Int?
  amarrStationTypeID    Int?
  gallenteStationTypeID Int?
  joveStationTypeID     Int?
}

model staServices {
  serviceID   Int     @id
  serviceName String? @db.VarChar(100)
  description String? @db.VarChar(1000)
}

model staStationTypes {
  stationTypeID          Int      @id
  dockEntryX             Float?
  dockEntryY             Float?
  dockEntryZ             Float?
  dockOrientationX       Float?
  dockOrientationY       Float?
  dockOrientationZ       Float?
  operationID            Int?
  officeSlots            Int?
  reprocessingEfficiency Float?
  conquerable            Boolean?
}

model staStations {
  stationID                BigInt  @id
  security                 Float?
  dockingCostPerVolume     Float?
  maxShipVolumeDockable    Float?
  officeRentalCost         Int?
  operationID              Int?
  stationTypeID            Int?
  corporationID            Int?
  solarSystemID            Int?
  constellationID          Int?
  regionID                 Int?
  stationName              String? @db.VarChar(100)
  x                        Float?
  y                        Float?
  z                        Float?
  reprocessingEfficiency   Float?
  reprocessingStationsTake Float?
  reprocessingHangarFlag   Int?

  @@index([constellationID], map: "ix_evesde_staStations_constellationID")
  @@index([corporationID], map: "ix_evesde_staStations_corporationID")
  @@index([operationID], map: "ix_evesde_staStations_operationID")
  @@index([regionID], map: "ix_evesde_staStations_regionID")
  @@index([solarSystemID], map: "ix_evesde_staStations_solarSystemID")
  @@index([stationTypeID], map: "ix_evesde_staStations_stationTypeID")
}

model translationTables {
  sourceTable      String  @db.VarChar(200)
  destinationTable String? @db.VarChar(200)
  translatedKey    String  @db.VarChar(200)
  tcGroupID        Int?
  tcID             Int?

  @@id([sourceTable, translatedKey])
}

model trnTranslationColumns {
  tcGroupID  Int?
  tcID       Int     @id
  tableName  String  @db.VarChar(256)
  columnName String  @db.VarChar(128)
  masterID   String? @db.VarChar(128)
}

model trnTranslationLanguages {
  numericLanguageID Int     @id
  languageID        String? @db.VarChar(50)
  languageName      String? @db.VarChar(200)
}

model trnTranslations {
  tcID       Int
  keyID      Int
  languageID String @db.VarChar(50)
  text       String

  @@id([tcID, keyID, languageID])
}

model warCombatZoneSystems {
  solarSystemID Int  @id
  combatZoneID  Int?
}

model warCombatZones {
  combatZoneID   Int     @id
  combatZoneName String? @db.VarChar(100)
  factionID      Int?
  centerSystemID Int?
  description    String? @db.VarChar(500)
}
